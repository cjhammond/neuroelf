# BinaryFileFormat (leave this tag as its own magic token!)

# xff file format for *.BVX files (Binary Variable eXtension)
# BVX FileVersions supported: 1
#
# Datatypes: (taken from matrix.h of ML2006a)
#
#  0 unknown (unsupported!)
#  1 cell (unsupported!)
#  2 struct (unsupported!)
#  3 logical (unsupported!)
#  4 char (strings, internally is uint16!)
#  5 void (unsupported!)
#  6 double
#  7 single
#  8 int8 (signed byte)
#  9 uint8 (unsigned byte)
# 10 int16 (signed short)
# 11 uint16 (unsigned short)
# 12 int32 (signed long)
# 13 uint32 (unsigned long)
# 14 int64 (signed long long)
# 15 uint64 (unsigned long long)
# 16 function (unsupported!)
# 17 opaque (unsupported!)
# 18 object (unsupported!)
#
# Version:  v0.9a
# Build:    11050318
# Date:     May-16 2010, 8:24 PM EST
# Author:   Jochen Weber, SCAN Unit, Columbia University, NYC, NY, USA
# URL/Info: http://neuroelf.net/

# Copyright (c) 2010, Jochen Weber
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Columbia University nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# FILE FORMAT
DefaultProperty:Variables
Description:Binary Variables files
EncodingSyntax:ieee-le
Extensions:bvx

# FIELDS
ListOfFields:!
type  !cond                   !disktype!datatype!dim                      !default !varname
FIELD !                       !uint32  !double  !1, 1                     !        !FileVersion
EXPRE !$BFFWRITE          !!!!!@NrOfVariables = numel(@Variables);
FIELD !                       !uint32  !double  !1, 1                     !        !NrOfVariables
EXPRE !!!!!!...
$AllowedDTC = { ...
    '9-4',  ...
    '11-4',  ...
    '6-6',  ...
    '7-6',  ...
    '12-6',  ...
    '7-7',  ...
    '8-7',  ...
    '10-7',  ...
    '8-8',  ...
    '9-9',  ...
    '10-10',  ...
    '11-11',  ...
    '12-12',  ...
    '13-13',  ...
    '14-14',  ...
    '15-15'};  ...
$DTypeSize = [0, 0, 0, 1, 0, 8, 4, 1, 1, 2, 2, 4, 4, 8, 8, 0, 0, 0];

# Looping over variables
EXPRE !$BFFREAD           !!!!! ...
@Variables = emptystruct({ ...
    'Name', 'NrOfDims', 'Dims', 'DatatypeOnDisk', 'DatatypeInMemory', 'Offset', 'Slope', 'Content'}); ...
if @NrOfVariables > 0, ...
    @Variables(@NrOfVariables).Name = ''; ...
end
BLOOP !                       ! ! !@NrOfVariables ! !VarNo
EXPRE !$BFFWRITE          !!!!! ...
$VName = @Variables($VarNo).Name; ...
if ~ischar($VName) || isempty($VName), ...
    @Variables($VarNo).Name = sprintf('var_%d', $VarNo); ...
else, ...
    @Variables($VarNo).Name = $VName(:)'; ...
end, ...
$IODims = size(@Variables($VarNo).Content); ...
@Variables($VarNo).NrOfDims = numel($IODims); ...
@Variables($VarNo).Dims = $IODims; ...
$DTMC = lower(class(@Variables($VarNo).Content)); ...
switch($DTMC), ...
    case {'char'}, ...
        $DTM = 4; ...
    case {'double'}, ...
        $DTM = 6; ...
    case {'int16'}, ...
        $DTM = 10; ...
    case {'int32'}, ...
        $DTM = 12; ...
    case {'int64'}, ...
        $DTM = 14; ...
    case {'int8'}, ...
        $DTM = 8; ...
    case {'single'}, ...
        $DTM = 7; ...
    case {'uint16'}, ...
        $DTM = 11; ...
    case {'uint32'}, ...
        $DTM = 13; ...
    case {'uint64'}, ...
        $DTM = 15; ...
    case {'uint8'}, ...
        $DTM = 9; ...
    otherwise, ...
        error('Invalid variable (datatype) in memory.'); ...
end, ...
@Variables($VarNo).DatatypeInMemory = $DTM; ...
if numel(@Variables($VarNo).DatatypeOnDisk) ~= 1 || ~any(6:15 == @Variables($VarNo).DatatypeOnDisk(1)), ...
    @Variables($VarNo).DatatypeOnDisk = $DTM; ...
end, ...
if $DTM == 4 && max(uint16(@Variables($VarNo).Content(:))) < 256, ...
    @Variables($VarNo).DatatypeOnDisk = 9; ...
end

FIELD !                       !cstring !cstring !1, 1                     !        !Variables($VarNo).Name
FIELD !                       !uint32  !double  !1, 1                     !        !Variables($VarNo).NrOfDims
EXPRE !                   !!!!!$NrOfDims = @Variables($VarNo).NrOfDims;
FIELD !                       !uint32  !double  !1, $NrOfDims             !        !Variables($VarNo).Dims
EXPRE !                   !!!!!$IODims = @Variables($VarNo).Dims;
FIELD !                       !uint32  !uint32  !1, 1                     !        !Variables($VarNo).DatatypeOnDisk
FIELD !                       !uint32  !uint32  !1, 1                     !        !Variables($VarNo).DatatypeInMemory
EXPRE !                   !!!!! ...
$DTD = @Variables($VarNo).DatatypeOnDisk; ...
$DTM = @Variables($VarNo).DatatypeInMemory; ...
$ReqSlope = (($DTD ~= $DTM) && any([6, 7] == $DTM)); ...
if $DTD == 4, ...
    $DTD = 11; ...
end, ...
$DTC = sprintf('%d-%d', $DTD, $DTM); ...
if ~any(strcmp($DTC, $AllowedDTC)), ...
    error('Invalid Datatypes or combination'); ...
end

EXPRE !$BFFWRITE && $ReqSlope !!!!! ...
if ~isempty(@Variables($VarNo).Content) && ~any([6, 7] == $DTD), ...
    @Variables($VarNo).Offset = mean(@Variables($VarNo).Content(:)); ...
    @Variables($VarNo).Content = @Variables($VarNo).Content - @Variables($VarNo).Offset; ...
    $MxAbs = max(abs(@Variables($VarNo).Content(:))); ...
    switch($DTD), ...
        case {8}, ...
            $Slope = $MxAbs / 127; ...
        case {10}, ...
            $Slope = $MxAbs / 32767; ...
        case {12}, ...
            $Slope = $MxAbs / 2147483647; ...
        otherwise, ...
            error('Bad DatatypeOnDisk'); ...
    end; ...
    if $Slope == 0, ...
        $Slope = eps; ...
    end, ...
    @Variables($VarNo).Content = round(@Variables($VarNo).Content / $Slope); ...
    @Variables($VarNo).Slope = $Slope; ...
else, ...
    @Variables($VarNo).Offset = 0; ...
    @Variables($VarNo).Slope = 1; ...
end

FIELD !$ReqSlope              !double  !double  !1, 1                     !        !Variables($VarNo).Offset
FIELD !$ReqSlope              !double  !double  !1, 1                     !        !Variables($VarNo).Slope
EXPRE !$HEADERONLY        !!!!!fseek(fid, $DTypeSize($DTD) * prod($IODims), 0); rulec = rulec + 17;
FIELD !$DTD == 9 && $DTM == 4 !uint8   !char    !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD ==11 && $DTM == 4 !uint16  !char    !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD == 6 && $DTM == 6 !double  !double  !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD == 7 && $DTM == 6 !single  !double  !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD ==12 && $DTM == 6 !int32   !double  !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD == 7 && $DTM == 7 !single  !single  !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD == 8 && $DTM == 7 !int8    !single  !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD ==10 && $DTM == 7 !int16   !single  !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD == 8 && $DTM == 8 !int8    !int8    !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD == 9 && $DTM == 9 !uint8   !uint8   !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD ==10 && $DTM ==10 !int16   !int16   !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD ==11 && $DTM ==11 !uint16  !uint16  !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD ==12 && $DTM ==12 !int32   !int32   !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD ==13 && $DTM ==13 !uint32  !uint32  !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD ==14 && $DTM ==14 !int64   !int64   !$IODims                  !        !Variables($VarNo).Content
FIELD !$DTD ==15 && $DTM ==15 !uint64  !uint64  !$IODims                  !        !Variables($VarNo).Content
EXPRE !$ReqSlope          !!!!!@Variables($VarNo).Content = @Variables($VarNo).Slope .* @Variables($VarNo).Content + @Variables($VarNo).Offset;
ELOOP !                       ! ! !  ! !VarNo

# Read rest of File into REMAININGCONTENT
EXPRE !$HEADERONLY        !!!!!fseek(fid, 0, 1);
EXPRE !$BFFREAD           !!!!!$RemSize = $FILESIZE - ftell(fid);
EXPRE !$BFFWRITE          !!!!!$RemSize = 0; try, if isfield(@@, 'REMAININGCONTENT'), $RemSize = prod(size(@REMAININGCONTENT)); end, end
FIELD !$RemSize > 0           !uint8   !uint8   !1, $RemSize              !        !REMAININGCONTENT

EndListOfFields

# new file code snippet
NewFileCode:!
@FileVersion = 1;
@NrOfVariables = 0;
@Variables = emptystruct({'Name', 'NrOfDims', 'Dims', 'DatatypeOnDisk', 'DatatypeInMemory', 'Offset', 'Slope', 'Content'});
EndNewFileCode
