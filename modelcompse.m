function f = modelcompse(sefull, serest, n, npfull, nprest, nrest)
% modelcompse  - compute F-stats based on SE of full and restricted model
%
% FORMAT:       f = modelcompse(sefull, serest, n, npfull, nprest [, nrest])
%
% Input fields:
%
%       sefull      standard error term of full model
%       serest      standard error term of restricted model
%       n           full D.F. (number of weighed observations)
%       npfull      number of parameters of full model
%       nprest      number of parameters of restricted model
%       nrest       full D.F. (number of weighed observations for r-model)
%
% Output fields:
%
%       f           F-statistic

% Version:  v0.9c
% Build:    13041220
% Date:     Dec-11 2012, 1:15 PM EST
% Author:   Jochen Weber, SCAN Unit, Columbia University, NYC, NY, USA
% URL/Info: http://neuroelf.net/

% Copyright (c) 2012, Jochen Weber
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%     * Redistributions of source code must retain the above copyright
%       notice, this list of conditions and the following disclaimer.
%     * Redistributions in binary form must reproduce the above copyright
%       notice, this list of conditions and the following disclaimer in the
%       documentation and/or other materials provided with the distribution.
%     * Neither the name of Columbia University nor the
%       names of its contributors may be used to endorse or promote products
%       derived from this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
% ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
% WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
% DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
% (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
% LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
% ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
% SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

% argument check
if nargin < 5 || ...
   ~isa(sefull, 'double') || ...
    isempty(sefull) || ...
    any(isinf(sefull(:)) | isnan(sefull(:))) || ...
   ~isa(serest, 'double') || ...
   ~isequal(size(serest), size(sefull)) || ...
    any(isinf(serest(:)) | isnan(serest(:))) || ...
   ~isa(n, 'double') || ...
   (numel(n) ~= 1 && ...
    ~isequal(size(n), size(sefull))) || ...
    any(isinf(n(:)) | isnan(n(:)) | n(:) < 1) || ...
   ~isa(npfull, 'double') || ...
    numel(npfull) ~= 1 || ...
    isinf(npfull) || ...
    isnan(npfull) || ...
    npfull < 2 || ...
   ~isa(nprest, 'double') || ...
    numel(nprest) ~= 1 || ...
    isinf(nprest) || ...
    isnan(nprest) || ...
    nprest < 1 || ...
    nprest > (npfull - 1) || ...
    any(n(:) < (npfull + 1))
    error( ...
        'neuroelf:BadArgument', ...
        'Bad or missing argument supplied.' ...
    );
end
if nargin < 6 || ...
   ~isa(nrest, 'double') || ...
   ~isequal(size(nrest), size(n)) || ...
    any(isinf(nrest(:)) | isnan(nrest(:)) | nrest(:) < (nprest + 1))
    nrest = n;
end

% square error terms
sefull = sefull .* sefull;
serest = serest .* serest;

% compute statistic
f = (1 ./ ((npfull - nprest) .* sefull)) .* ...
    ((nrest - nprest) .* serest - (n - npfull) .* sefull);
f(f < 0) = 0;
