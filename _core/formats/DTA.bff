# BinaryFileFormat (leave this tag as its own magic token!)

# Stata file format for *.DTA files (Stata dataset/DTA File Format)
# DTA FileVersions supported: 113 - 115
#
# See http://www.stata.com/help.cgi?dta for details (some notes copied below)

# Version:  v0.9c
# Build:    13021818
# Date:     Feb-18 2013, 5:48 PM EST
# Author:   Jochen Weber, SCAN Unit, Columbia University, NYC, NY, USA
# URL/Info: http://neuroelf.net/

# FILE FORMAT
DefaultProperty:Data
Description:Stata DTA Dataset Files
EncodingSyntax:ieee-le
Extensions:dta

# FIELDS
ListOfFields:!
type  !cond                   !disktype!datatype!dim                      !default !varname

# check layout code in file header and, potentially, switch endian-ness
EXPRE !$BFFREAD           !!!!!...
$fetype = fread(fid, [1, 1], 'uint8=>double'); ...
if $fetype < 113 || $fetype > 115, ...
    fclose(fid); ...
    error('WRONG_FILETYPE'); ...
end, ...
$endtype = fread(fid, [1, 1], 'uint8=>double'); ...
if $endtype ~= 1 && $endtype ~= 2, ...
    fclose(fid); ...
    error('UNKNOWN_ENDIAN_ENCODING'); ...
elseif $endtype == 1, ...
    fclose(fid); ...
    fid = fopen($FILENAME, 'r', 'ieee-be'); ...
end, ...
fseek(fid, 0, -1);

# make sure to write out in little-endian notation
EXPRE !$BFFWRITE          !!!!!...
if @FileVersion < 113, ...
    @FileVersion = 113; ...
elseif @FileVersion > 115, ...
    @FileVersion = 115; ...
end, ...
@Endianness = 2;

# header fields (section 5.1)
FIELD !                       !uint8   !double  !1, 1                     !        !FileVersion
FIELD !                       !uint8   !double  !1, 1                     !        !Endianness
FIELD !                       !uint8   !double  !1, 1                     !        !FileType
FIELD !                       !uint8   !double  !1, 1                     !        !Unused0x0003
FIELD !                       !uint16  !double  !1, 1                     !        !NrOfVariables
FIELD !                       !uint32  !double  !1, 1                     !        !NrOfObservations
EXPRE !$BFFWRITE          !!!!!...
if ~isempty(@DataLabelText), ...
    $dllen = numel(@DataLabelText); ...
    $dlui8 = [uint8(@DataLabelText(1:min(dllen, 80))), uint8(0)]; ...
    @DataLabel = [dlui8, @DataLabel(numel($dlui8)+1:81)]; ...
end
if ~isempty(@TimeStampText), ...
    $dllen = numel(@TimeStampText); ...
    $dlui8 = [uint8(@TimeStampText(1:min(dllen, 17))), uint8(0)]; ...
    @TimeStamp = [dlui8, @TimeStamp(numel($dlui8)+1:17), uint8(0)]; ...
end
FIELD !                       !uint8   !uint8   !1, 81                    !        !DataLabel
FIELD !                       !uint8   !uint8   !1, 18                    !        !TimeStamp
EXPRE !$BFFREAD           !!!!!...
@DataLabelText = unzerostring(char(@DataLabel)); ...
@TimeStampText = unzerostring(char(@TimeStamp));
EXPRE !                   !!!!!...
$NrOfVarsPlusOne = @NrOfVariables + 1; ...
if @FileVersion < 114, ...
    $FormatLength = 12; ...
else, ...
    $FormatLength = 49; ...
end

# descriptors (section 5.2)
EXPRE !$BFFREAD           !!!!!...
@Variable = emptystruct({'Type', 'Name', 'SortOrder', 'Format', 'Label', 'VarLabel'}, [1, @NrOfVariables]);

BLOOP !@NrOfVariables > 0 ! ! !@NrOfVariables ! !VarNo1
FIELD !                       !uint8   !double  !1, 1                     !        !Variable($VarNo1).Type
ELOOP !                     !!!1 ! !VarNo1

BLOOP !@NrOfVariables > 0 ! ! !@NrOfVariables ! !VarNo2
EXPRE !$BFFWRITE          !!!!!...
@Variable($VarNo2).Name = [uint8(zerodstring(@Variable($VarNo2).Name, 32)), uint8(0)];
FIELD !                       !uint8   !uint8   !1, 33                    !        !Variable($VarNo2).Name
EXPRE !                   !!!!!...
@Variable($VarNo2).Name = unzerostring(char(@Variable($VarNo2).Name));
ELOOP !                     !!!1 ! !VarNo2

FIELD !$BFFREAD               !uint16  !uint16  !1, $NrOfVarsPlusOne      !        !SortOrder
EXPRE !                   !!!!! ...
if $BFFREAD, ...
    $socount = 1; ...
    while (@SortOrder($socount) > 0), ...
        @Variable(double(@SortOrder($socount))).SortOrder = $socount; ...
        $socount = $socount + 1; ...
    end, ...
else, ...
    [$solist, $socount] = sort(cat(1, @Variable.SortOrder)); ...
    @SortOrder = uint16([$socount(:)', zeros(1, $NrOfVarsPlusOne - numel($socount))]); ...
end
FIELD !$BFFWRITE              !uint16  !uint16  !1, $NrOfVarsPlusOne      !        !SortOrder

BLOOP !@NrOfVariables > 0 ! ! !@NrOfVariables ! !VarNo4
EXPRE !$BFFWRITE          !!!!!...
@Variable($VarNo4).Format = [uint8(zerodstring(@Variable($VarNo4).Format, $FormatLength - 1)), uint8(0)];
FIELD !                       !uint8   !uint8   !1, $FormatLength         !        !Variable($VarNo4).Format
EXPRE !                   !!!!!...
@Variable($VarNo4).Format = unzerostring(char(@Variable($VarNo4).Format));
ELOOP !                     !!!1 ! !VarNo4

BLOOP !@NrOfVariables > 0 ! ! !@NrOfVariables ! !VarNo5
EXPRE !$BFFWRITE          !!!!!...
@Variable($VarNo5).Label = [uint8(zerodstring(@Variable($VarNo5).Label, 32)), uint8(0)];
FIELD !                       !uint8   !uint8   !1, 33                    !        !Variable($VarNo5).Label
EXPRE !                   !!!!!...
@Variable($VarNo5).Label = unzerostring(char(@Variable($VarNo5).Label));
ELOOP !                     !!!1 ! !VarNo5


# labels (section 5.3)
BLOOP !@NrOfVariables > 0 ! ! !@NrOfVariables ! !VarNo6
EXPRE !$BFFWRITE          !!!!!...
@Variable($VarNo6).VarLabel = [uint8(zerodstring(@Variable($VarNo6).VarLabel, 80)), uint8(0)];
FIELD !                       !uint8   !uint8   !1, 81                    !        !Variable($VarNo6).VarLabel
EXPRE !                   !!!!!...
@Variable($VarNo6).VarLabel = unzerostring(char(@Variable($VarNo6).VarLabel));
ELOOP !                     !!!1 ! !VarNo6


# expansion fields (section 5.4)
EXPRE !$BFFREAD           !!!!!...
@NrOfExpansionFields = 0; ...
@ExpansionFields = emptystruct({'Type', 'Length', 'VarName', 'Characteristic', 'Content'});
BLOOP !$BFFREAD           ! ! !999 ! !EFRNum
EXPRE !                   !!!!!...
$eftype = fread(fid, [1, 1], 'uint8=>double'); ...
$eflen = fread(fid, [1, 1], 'uint32=>double'); ...
if $eflen == 0, ...
    $EFRNum = 1000; ...
end
BLOOP !$eflen > 0 && $eftype == 1 ! ! !1 ! !EFRead
EXPRE !                   !!!!!...
@ExpansionFields($EFRNum).Type = $eftype; ...
@ExpansionFields($EFRNum).Length = $eflen; ...
@ExpansionFields($EFRNum).VarName = unzerostring(char(fread(fid, [1, 33], '*uint8')));
@ExpansionFields($EFRNum).Characteristic = unzerostring(char(fread(fid, [1, 33], '*uint8')));
@ExpansionFields($EFRNum).Content = unzerostring(char(fread(fid, [1, $eflen - 66], '*uint8')));
ELOOP !                     !!!1   ! !EFRead
ELOOP !                     !!!999 ! !EFRNum
EXPRE !$BFFREAD           !!!!!@NrOfExpansionFields = numel(@ExpansionFields);

EXPRE !$BFFWRITE          !!!!!@NrOfExpansionFields = numel(@ExpansionFields);
BLOOP !$BFFWRITE          ! ! !@NrOfExpansionFields ! !EFWNum
EXPRE !                   !!!!!...
if any(double(@ExpansionFields($EFWNum).Content) == 0), ...
    @Expansionfields($EFWNum).Content(findfirst(double(@Expansionfields($EFWNum).Content) == 0) + 1:end) = []; ...
end, ...
$efrecord = [uint8(zerodstring(@ExpansionFields($EFWNum).VarName, 32)), uint8(0), ...
    uint8(zerodstring(@ExpansionFields($EFWNum).Characteristic, 32)), uint8(0), ...
    uint8(@Expansionfields($EFWNum).Content), uint8(0)]; ...
fwrite(fid, uint8(1), 'uint8'); ...
fwrite(fid, uint32(numel($efrecord)), 'uint32'); ...
fwrite(fid, $efrecord, 'uint8');
ELOOP !                     !!!1 ! !EFWNum
EXPRE !$BFFWRITE          !!!!!...
fwrite(fid, uint8(zeros(1, 5)), 'uint8');

# data (section 5.5)
EXPRE !$BFFREAD           !!!!!...
@Data = zeros(@NrOfObservations, @NrOfVariables); ...
@StringData = cell(@NrOfObservations, @NrOfVariables); ...
$recstartpos = ftell(fid); ...
$rectypprec = {'int8', 'int16', 'int32', 'single', 'double'}; ...
$rectypsize = [0:250, 1, 2, 4, 4, 8]; ...
$recordsize = 0; ...
for irvcnt = 1:@NrOfVariables, ...
    $recordsize = $recordsize + $rectypsize(@Variable(irvcnt).Type + 1); ...
end, ...
$recordoffset = 0; ...
for irvcnt = 1:@NrOfVariables, ...
    fseek(fid, $recstartpos + $recordoffset, -1); ...
    if @Variable(irvcnt).Type < 251, ...
        $recprecision = sprintf('%d*uint8=>char', @Variable(irvcnt).Type); ...
        for irccnt = 1:@NrOfObservations, ...
            @Data{irccnt, irvcnt} = unzerostring(fread(fid, [1, @Variable(irvcnt).Type], $recprecision, $recordsize - @Variable(irvcnt).Type)); ...
        end, ...
    else, ...
        $recprecision = $rectypprec{@Variable(irvcnt).Type - 250}; ...
        @Data(:, irvcnt) = fread(fid, @NrOfObservations, $recprecision, $recordsize - $rectypsize(@Variable(irvcnt).Type + 1)); ...
    end, ...
    $recordoffset = $recordoffset + $rectypsize(@Variable(irvcnt).Type + 1); ...
end, ...
fseek(fid, $recstartpos + @NrOfObservations * $recordsize, -1);

EXPRE !$BFFWRITE          !!!!!...
$recstartpos = ftell(fid); ...
$rectypprec = {'int8', 'int16', 'int32', 'single', 'double'}; ...
$rectypsize = [0:250, 1, 2, 4, 4, 8]; ...
$recordsize = 0; ...
for irvcnt = 1:@NrOfVariables, ...
    $recordsize = $recordsize + $rectypsize(@Variable(irvcnt).Type + 1); ...
end, ...
fwrite(fid, uint8(zeros(1, @NrOfObservations * $recordsize)), 'uint8'); ...
fseek(fid, $recstartpos, -1); ...
$recordoffset = 0; ...
for irvcnt = 1:@NrOfVariables, ...
    fseek(fid, $recstartpos + $recordoffset + $rectypsize(@Variable(irvcnt).Type + 1) - $recordsize, -1); ...
    if @Variable(irvcnt).Type < 251, ...
        $recprecision = sprintf('%d*uint8', @Variable(irvcnt).Type); ...
        for irccnt = 1:@NrOfObservations, ...
            fwrite(fid, uint8(zerodstring(@Data{irccnt, irvcnt}, @Variable(irvcnt).Type)), $recprecision, $recordsize - @Variable(irvcnt).Type); ...
        end, ...
    else, ...
        $recprecision = $rectypprec{@Variable(irvcnt).Type - 250}; ...
        fwrite(fid, @Data(:, irvcnt), $recprecision, $recordsize - $rectypsize(@Variable(irvcnt).Type + 1)); ...
    end, ...
    $recordoffset = $recordoffset + $rectypsize(@Variable(irvcnt).Type + 1); ...
end, ...
fseek(fid, $recstartpos + @NrOfObservations * $recordsize, -1);

# Read rest of File into REMAININGCONTENT
EXPRE !$HEADERONLY        !!!!!fseek(fid, 0, 1);
EXPRE !$BFFREAD   !  !  !  !  !$RemSize = $FILESIZE - ftell(fid);
EXPRE !$BFFWRITE  !  !  !  !  !$RemSize = 0; try, if isfield(@@, 'REMAININGCONTENT'), $RemSize = prod(size(@REMAININGCONTENT)); end, end
FIELD !$RemSize > 0           !uint8   !uint8   !1, $RemSize              !        !REMAININGCONTENT

EndListOfFields

# new file code snippet
NewFileCode:!
@FileVersion = 115;
@Endianness = 2;
@FileType = 1;
@Unused0x0003 = 0;
@NrOfVariables = 1;
@NrOfObservations = 1;
@DataLabel = uint8(zeros(1, 81));
@TimeStamp = uint8(zerodstring(datestr(now, 'dd mmm yyyy hh:MM'), 18));
@DataLabelText = '';
@TimeStampText = unzerostring(char(@TimeStamp));
@Variables = emptystruct({'Type', 'Name', 'SortOrder', 'Format', 'Label', 'VarLabel'}, [1, @NrOfVariables]);
[@Variables.Type] = deal(255);
[@Variables.Name] = deal('Value');
[@Variables.Format] = deal('%10g');
[@Variables.Label] = deal('');
[@Variables.VarLabel] = deal('Label');
@SortOrder = uint16(zeros(1, @NrOfVariables + 1));
@ExpansionFields = emptystruct({'Type', 'Length', 'VarName', 'Characteristic', 'Content'});
@Data = zeros(@NrOfObservations, @NrOfVariables);
@StringData = cell(@NrOfObservations, @NrOfVariables);
EndNewFileCode
