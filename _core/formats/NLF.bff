# BinaryFileFormat (leave this tag as its own magic token!)

# NeuroeLf File format for *.NLF (NeuroeLf File)
# NLF FileVersions supported: 1
#
# NLF files are supposed to be rather flexible in their application,
# capable of storing highly different content (voxeldata, vertexdata,
# etc.)
#
# Version:  v0.9c
# Build:    11050213
# Date:     Apr-29 2011, 8:11 PM EST
# Author:   Jochen Weber, SCAN Unit, Columbia University, NYC, NY, USA
# URL/Info: http://neuroelf.net/

# Copyright (c) 2010, 2011, Jochen Weber
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Columbia University nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# FILE FORMAT
DefaultProperty:Data
Description:NeuroElf data file
EncodingSyntax:ieee-le
Extensions:nlf
Magic:|
name             |range       |type    |magic
NLF_MagicToken   |1, 4        |hex     |e5,52,f5,c6
EndMagic

# FIELDS
ListOfFields:!
type  !cond                   !disktype!datatype!dim                      !default !varname

# pre-write checks
# - write magic token
# - certify datatype, nrofdims, size
# - if data is transio, make sure the settings are correct
EXPRE !$BFFWRITE          !!!!!...
if any(@DimMeaning == 'm') && ...
   (isempty(@Mask) || ...
    ~islogical(@Mask) || ...
    ~any(size(@Data) == sum(@Mask(:)))) ...
    error( ...
        'neuroelf:BadFileContent', ...
        'Invalid Mask/Data combination.' ...
    ); ...
end, ...
fwrite(fid, [229, 82, 245, 198], 'uint8'); ...
@LastWriteTime = utc; ...
@NrOfDims = ndims(@Data); ...
@Size = [size(@Data), ones(1, 8 - @NrOfDims)]; ...
if istransio(@Data) && ~strcmpi($FILENAME, filename(@Data)), ...
    @DataType = mltype(datatype(@Data)); ...
    @DataExternal = 1; ...
    if littleendian(@Data), ...
        @DataExternalEndian = 'l'; ...
    else, ...
        @DataExternalEndian = 'b'; ...
    end, ...
    @DataFile = filename(@Data); ...
    @DataOffset = offset(@Data); ...
else, ...
    if istransio(@Data), ...
        @DataType = mltype(datatype(@Data)); ...
    else, ...
        @DataType = mltype(class(@Data)); ...
    end, ...
    @DataExternal = 0; ...
    @DataExternalEndian = 'l'; ...
    @DataFile = ''; ...
    @DataOffset = 0; ...
end, ...
switch (@Intent), ...
    case {'a3d'}, ...
        @A3D.NrOfTransforms = numel(@A3D.Transform); ...
        @A3D.NrOfSVCs = size(@A3D.SVColors, 1); ...
        if (@A3D.NrOfSVCs > 255) || ...
            any(@A3D.SVColors(:, 1) > 255) ...
            error( ...
                'neuroelf:BadFileContent', ...
                'Invalid SVColors for A3D.' ...
            ); ...
        end, ...
end

# pre-read checks
EXPRE !$BFFREAD           !!!!!...
if $FILESIZE < 144, ...
    error( ...
        'neuroelf:BadFileContent', ...
        'File too short, not a valid NeuroElf file.' ...
    ); ...
end, ...
nlftoken = fread(fid, [1, 1], 'uint8=>double'); ...
if ~isequal(nlftoken, [229, 82, 245, 198]), ...
    error( ...
        'neuroelf:BadFileMagic', ...
        'Not a NeuroElf file.' ...
    ); ...
end, ...
@@ = xff(0, 'newcont', 'nlf');

# first real header fields (0x0004 - 0x000f)
FIELD !                       !uint8   !double  !1, 1                     !        !FileVersion
FIELD !                       !uint8   !char    !1, 3                     !        !Intent
FIELD !                       !uint32  !uint32  !1, 1                     !        !LastWriteTime
FIELD !                       !uint8   !double  !1, 1                     !        !DataType
FIELD !                       !uint8   !double  !1, 1                     !        !NrOfDims
FIELD !                       !uint8   !double  !1, 1                     !        !DataExternal
FIELD !                       !uint8   !char    !1, 1                     !        !DataExternalEndian
#
# FileVersion, so far only 0x01 is supported
#
# Intent required by program(s) to see if they can handle the actual
# content, currently the following codes are used:
#  'a3d' - anatomical voxel 3D data
#  'dti' - DTI-based dataset
#  'exp' - experimental design
#  'ica' - ICA results (with extended parameters per map)
#  'map' - statistical maps (d.f., etc.)
#  'msk' - mask file
#  'reg' - regression output details
#  't1d' - time course/functional data, e.g. surface-based fMRI
#  't2d' - time course/functional data, e.g. slice-based fMRI
#  't3d' - time course/functional data, e.g. voxel-based fMRI
#  'trf' - transformation-volumes
#  'tri' - triangle-based surface fields (triangles, colors, etc.)
# this influences which additional header fields are expected
#
# LastWriteTime, UTC when the file was last written to disk
#
# DataType is re-using Matlab's internal system with numbers 6 through 15
# being (in this order):
#  double (6), single (6), int8 (8), uint8 (9), int16 (10),
#  uint16 (11), int32 (12), uint32 (13), int64 (14), uint64 (15)
#
# NrOfDims number between 1 and 8
#
# DataExternal / DataExternalLE:
#  0x00 - data is in same file (after header, default)
#  0x01 - data is in external file (filename and offset in this file)
#
EXPRE !                   !!!!!...
@Intent = lower(@Intent(1:3)); ...
if @FileVersion ~= 1 || ...
   ~any(strcmp(@Intent, ...
   {'a3d', 'dti', 'exp', 'ica', 'map', 'msk', ...
    'reg', 't1d', 't2d', 't3d', 'trf', 'tri'})), ...
    error( ...
        'neuroelf:BadFileContent', ...
        'Invalid FileVersion or Intent code.' ...
    ); ...
end, ...
if @DataType < 6 || @DataType > 15 || @NrOfDims < 1 || @NrOfDims > 8, ...
    error( ...
        'neuroelf:BadFileContent', ...
        'Invalid DataType or NrOfDims value.' ...
    ); ...
end, ...
if ~any('bl' == @DataExternalEndian), ...
    error( ...
        'neuroelf:BadFileContent', ...
        'Invalid DataExternalEndian value.' ...
    ); ...
end

# information about the (up to) eight dimensions (0x0010 - 0x007f)
FIELD !                       !uint8   !char    !1, 8                     !        !DimMeaning
FIELD !                       !uint8   !char    !1, 8                     !        !DimUnit
FIELD !                       !uint32  !double  !1, 8                     !        !Size
FIELD !                       !double  !double  !1, 8                     !        !Resolution
FIELD !                       !double  !double  !1, 1                     !        !ScalingSlope
FIELD !                       !double  !double  !1, 1                     !        !ScalingIntercept
# DimMeaning, series of unique characters:
#  x, y, z     (spatial axes, used with transformation)
#  d           (DTI-based dimensions, sub-meaning in header)
#  m, v        (masked data or vertex)
#  r           (regressor, within-subject dimension)
#  s           (subject or session, across-subject dimensions)
#  t           (time)
#  1, 2, 3     (within voxel/vertex matrix/array dimensions)
#  .           (unused, size should be set to 1)
#  at this time, intent requires certain combinations of meanings:
#  'a3d': either of 'xyz.....', 'xyzs....'
#  'dti': either of 'xyzd....', 'dxyz....', 'xyzds...', 'dxyzs...'
#  'exp': either of 'tr......', 'o1......'
#  'ica': either of 'vr......', 'xyr.....', 'xyzr....', 'vrs.....',
#                   'xyrs....', 'xyzrs...' (also for map and reg)
#  'msk': either of 'v.......', 'xy......', 'xyz.....'
#  't1d': either of 'tm......', 'mt......', 'tsm.....', 'mts.....',
#                   'tv......', 'vt......', 'tsv.....', 'vts.....'
#  't2d': either of 'txy.....', 'xyt.....', 'tsxy....', 'xyts....'
#  't3d': either of 'txyz....', 'xyzt....', 'tsxyz...', 'xyzts...'
#  'trf': either of 'xyz12...', '12xyz...'
#  'tri': either of 'v1......', '1v......', 'v1s.....', '1vs.....'
#
# DimUnit, series of characters:
#  .             no unit (subjects, vertices, etc.)
#  M, m, u       Meter, milli-, micrometer (x,y,z dims)
#  d, s, l, p    day, second, millisecond, phase (t dim)
EXPRE !                   !!!!!...
@DimMeaning(@NrOfDims+1:8) = '.'; ...
if (strcmp(@Intent, 'a3d') && ...
    ~any(strcmp(@DimMeaning, {'xyz.....', 'xyzs....'}))) || ...
   (strcmp(@Intent, 'dti') && ...
    ~any(strcmp(@DimMeaning, {'xyzd....', 'dxyz....', 'xyzds...', 'dxyzs...'}))) || ...
   (strcmp(@Intent, 'dti') && ...
    ~any(strcmp(@DimMeaning, {'tr......', 'o1......'}))) || ...
   (any(strcmp(@Intent, {'ica', 'map', 'reg'})) && ...
    ~any(strcmp(@DimMeaning, ...
       {'vr......', 'xyr.....', 'xyzr....', 'vrs.....', 'xyrs....', 'xyzrs...'}))) || ...
   (strcmp(@Intent, 'msk') && ...
    ~any(strcmp(@DimMeaning, {'v.......', 'xy......', 'xyz.....'}))) || ...
   (strcmp(@Intent, 't1d') && ...
    ~any(strcmp(@DimMeaning, {'tm......', 'mt......', 'tsm.....', 'mts.....', ...
        'tv......', 'vt......', 'tsv.....', 'vts.....'}))) || ...
   (strcmp(@Intent, 't2d') && ...
    ~any(strcmp(@DimMeaning, {'txy.....', 'xyt.....', 'tsxy....', 'xyts....'}))) || ...
   (strcmp(@Intent, 't3d') && ...
    ~any(strcmp(@DimMeaning, {'txyz....', 'xyzt....', 'tsxyz...', 'xyzts...'}))) || ...
   (strcmp(@Intent, 'trf') && ...
    ~any(strcmp(@DimMeaning, {'xyz12...', '12xyz...'}))) || ...
   (strcmp(@Intent, 'tri') && ...
    ~any(strcmp(@DimMeaning, {'v1......', '1v......', 'v1s.....', '1vs.....'}))), ...
    error('Bad Intent/DimMeaning combination.'); ...
end, ...
$iosize = @Size(1:@NrOfDims); ...
$iotype = mltype(@DataType); ...
@Size = [$iosize, ones(1, 8 - @NrOfDims)]; ...
if any(@Size == 0), ...
    error( ...
        'neuroelf:BadFileContent', ...
        'Invalid size value(s).' ...
    ); ...
end, ...
if isinfnan(@ScalingSlope) || ...
    @ScalingSlope == 0, ...
    @ScalingSlope = 1; ...
end, ...
if isinfnan(@ScalingIntercept), ...
    @ScalingIntercept = 0; ...
end

# GlobalTransform, global transformation matrix
BLOOP !any(@DimMeaning == 'm' | @DimMeaning == 'z')! ! !1 ! !DatasetIs3D
EXPRE !$BFFWRITE          !!!!!@GlobalTransform = @GlobalTransform(1:3, 1:4);
FIELD !                       !double  !double  !3, 4                     !        !GlobalTransform
FIELD !                       !uint8   !double  !1, 2                     !        !IndivTransformDims
EXPRE !                   !!!!!...
@GlobalTransform(4, :) = [0, 0, 0, 1]; ...
@IndivTransformDims = min(8, @IndivTransformDims); ...
if @IndivTransformDims(2) > 0, ...
    if @IndivTransformDims(1) == 0 || ...
        @IndivTransformDims(1) == @IndivTransformDims(2), ...
        @IndivTransformDims = [@IndivTransformDims(2), 0]; ...
        $IndivTransformDims = @IndivTransformDims(1); ...
    else, ...
        $IndivTransformDims = @IndivTransformDims; ...
    end, ...
else, ...
    if @IndivTransformDims(1) > 0, ...
        $IndivTransformDims = @IndivTransformDims(1); ...
    else, ...
        $IndivTransformDims = []; ...
    end, ...
end, ...
if $BFFWRITE && ~isempty($IndivTransformDims), ...
    @IndivTransforms = @IndivTransforms(1:3, 1:4, :, :); ...
end
FIELD !~isempty($IndivTransformDims)!double  !double  !3, 4, $IndivTransformDims ! !IndivTransforms
EXPRE !                   !!!!!@IndivTransforms(4, 4, :) = 1;         
ELOOP !                       ! ! !  ! !DatasetIs3D

# Free-text dataset name and filename of source (map, regression, etc.)
FIELD !                       !cstring !cstring !1, 1                     !        !Name
FIELD !                       !cstring !cstring !1, 1                     !        !SourceFilename

# different sub-types (intents) -> anatomical dataset, a3d
BLOOP !strcmp(@Intent, 'a3d') ! ! !1 ! !DatasetIsA3D
FIELD !                       !uint32  !double  !1, 1                     !        !A3D.NrOfTransforms
EXPRE !$BFFREAD           !!!!!@A3D.Transform = emptystruct({'Type', 'NrOfValues', 'Values'});
BLOOP !                       ! ! !@A3D.NrOfTransforms ! !NumTrfA3D
FIELD !                       !uint8   !double  !1, 1                     !        !A3D.Transform($NumTrfA3D).Type
EXPRE !$BFFWRITE          !!!!!...
$trfiodim = @A3D.Transform($NumTrfA3D).Values(:); ...
@A3D.Transform($NumTrfA3D).Values = $trfiodim; ...
$trfiodim = numel($trfiodim); ...
@A3D.Transform($NumTrfA3D).NrOfValues = $trfiodim;
FIELD !                       !uint8   !double  !1, 1                     !        !A3D.Transform($NumTrfA3D).NrOfValues
EXPRE !$BFFREAD           !!!!!$trfiodim = @A3D.Transform($NumTrfA3D).NrOfValues;
FIELD !                       !double  !double  !1, $trfiodim             !        !A3D.Transform($NumTrfA3D).Values
ELOOP !                       ! ! !  ! !NumTrfA3D
FIELD !                       !uint8   !double  !1, 1                     !        !A3D.NrOfSVCs
FIELD !                       !uint8   !double  !@A3D.NrOfSVCs, 4         !        !A3D.SVColors
ELOOP !                       ! ! !  ! !DatasetIsA3D

#  -> diffusion tensor imaging data, dti
BLOOP !strcmp(@Intent, 'dti') ! ! !1 ! !DatasetIsDTI
ELOOP !                       ! ! !  ! !DatasetIsDTI

#  -> experiment file, exp
BLOOP !strcmp(@Intent, 'exp') ! ! !1 ! !DatasetIsEXP
ELOOP !                       ! ! !  ! !DatasetIsEXP

#  -> independent component analysis, ica
BLOOP !strcmp(@Intent, 'ica') ! ! !1 ! !DatasetIsICA
ELOOP !                       ! ! !  ! !DatasetIsICA

#  -> statistics outcome/maps, map (or ica)
BLOOP !any(strcmp(@Intent, {'ica', 'map'})) ! ! !1 ! !DatasetIsMAP
ELOOP !                       ! ! !  ! !DatasetIsMAP

#  -> mask specification, msk
BLOOP !strcmp(@Intent, 'msk') ! ! !1 ! !DatasetIsMSK
ELOOP !                       ! ! !  ! !DatasetIsMSK

#  -> regression output, reg
BLOOP !strcmp(@Intent, 'reg') ! ! !1 ! !DatasetIsREG
ELOOP !                       ! ! !  ! !DatasetIsREG

#  -> time course data, t?d
BLOOP !any(strcmp(@Intent, {'t1d', 't2d', 't3d'})) ! ! !1 ! !DatasetIsTCD
ELOOP !                       ! ! !  ! !DatasetIsTCD

#  -> transformation-volume/matrices, trf
BLOOP !strcmp(@Intent, 'trf') ! ! !1 ! !DatasetIsTRF
ELOOP !                       ! ! !  ! !DatasetIsTRF

#  -> triangle-based surface, tri
BLOOP !strcmp(@Intent, 'tri') ! ! !1 ! !DatasetIsTRI
ELOOP !                       ! ! !  ! !DatasetIsTRI

# then handle data
BLOOP !~$HEADERONLY           ! ! !1 ! !ReadData

# mask?
BLOOP !any(@DimMeaning == 'm')! ! !1 ! !DataIsMasked
EXPRE !                   !!!!!...
if $BFFWRITE, ...
    fwrite(fid, ndims(@Mask), 'uint8'); ...
    fwrite(fid, size(@Mask), 'uint32'); ...
    iomskrat = sum(@Mask) ./ numel(@Mask); ...
    if iomskrat >= 0.25, ...
        fwrite(fid, 1, 'uint8'); ...
        fwrite(fid, @Mask + 0, 'uint8'); ...
    else, ...
        fwrite(fid, 2, 'uint8'); ...
        fwrite(fid, sum(@Mask), 'uint32'); ...
        fwrite(fid, find(@Mask(:)), 'uint32'); ...
    end, ...
else, ...
    iomsknd = fread(fid, [1, 1], 'uint8=>double'); ...
    iomsksz = fread(fid, [1, iomsknd], 'uint32=>double'); ...
    iomskrat = fread(fid, [1, 1], 'uint8=>double'); ...
    if iomskrat == 1, ...
        @Mask = (fread(fid, iomsksz, 'uint8=>uint8') > 0); ...
    else, ...
        iomsknel = fread(fid, [1, 1], 'uint32=>double'); ...
        @Mask = false(iomsksz); ...
        @Mask(fread(fid, [1, iomsknel], 'uint32=>double')) = true; ...
    end, ...
end
ELOOP !                       ! ! !  ! !DataIsMasked

# internal data
BLOOP !@DataExternal == 0     ! ! !1 ! !DataIsInternal
FIELD !@DataType == 6         !double  !double  !@Size                    !        !Data
FIELD !@DataType == 7         !single  !single  !@Size                    !        !Data
FIELD !@DataType == 8         !int8    !int8    !@Size                    !        !Data
FIELD !@DataType == 9         !uint8   !uint8   !@Size                    !        !Data
FIELD !@DataType == 10        !int16   !int16   !@Size                    !        !Data
FIELD !@DataType == 11        !uint16  !uint16  !@Size                    !        !Data
FIELD !@DataType == 12        !int32   !int32   !@Size                    !        !Data
FIELD !@DataType == 13        !uint32  !uint32  !@Size                    !        !Data
FIELD !@DataType == 14        !int64   !int64   !@Size                    !        !Data
FIELD !@DataType == 15        !uint64  !uint64  !@Size                    !        !Data
ELOOP !                       ! ! !  ! !DataIsInternal

# external data
BLOOP !@DataExternal > 0      ! ! !1 ! !DataIsExternal
FIELD !                       !cstring !cstring !1, 1                     !        !DataFile
FIELD !                       !uint32  !double  !1, 1                     !        !DataOffset
EXPRE !                   !!!!!...
if $BFFWRITE, ...
    if ~istransio(@Data), ...
        datafid = fopen(@DataFile, 'r+', ['ieee-' @DataExternalEndian 'e']); ...
        if datafid < 1, ...
            error( ...
                'neuroelf:BadFileContent', ...
                'Invalid transio Data.' ...
            ); ...
        end, ...
        try, ...
            fseek(datafid, @DataOffset, -1); ...
            if ftell(datafid) ~= @DataOffset, ...
                fclose(datafid); ...
                error( ...
                    'neuroelf:BadFileContent', ...
                    'File seek error.' ...
                ); ...
            end, ...
            fwrite(datafid, @Data, mltype(@DataType)); ...
            fclose(datafid); ...
        end, ...
    end, ...
else, ...
    @Data = transio(@DataFile, ...
       [@DataExternalEndian 'e'], mltype(@DataType), @DataOffset, $iosize); ...
end
ELOOP !                       ! ! !  ! !DataIsExternal

# read rest of File into REMAININGCONTENT
ELOOP !                       ! ! !  ! !ReadData
EXPRE !$HEADERONLY        !!!!!fseek(fid, 0, 1);
EXPRE !$BFFREAD           !!!!!$RemSize = $FILESIZE - ftell(fid);
EXPRE !$BFFWRITE          !!!!!$RemSize = 0; try, if isfield(@@, 'REMAININGCONTENT'), $RemSize = prod(size(@REMAININGCONTENT)); end, end
FIELD !$RemSize > 0           !uint8   !uint8   !1, $RemSize              !        !REMAININGCONTENT

# that's it
EndListOfFields

NewFileCode:!
@FileVersion = 1;
@Intent = 'a3d';
@LastWriteTime = uint32(0);
@DataType = 9;
@NrOfDims = 3;
@DataExternal = 0;
@DataExternalEndian = 'l';
@DataFile = '';
@DataOffset = 0;
@DimMeaning = 'xyz.....';
@DimUnit = 'mmm.....';
@Size = [256, 256, 256, 1, 1, 1, 1, 1];
@Resolution = ones(1, 8);
@ScalingSlope = 1;
@ScalingIntercept = 0;
@GlobalTransform = [1, 0, 0, -129; 0, 1, 0, -129; 0, 0, 1, -129; 0, 0, 0, 1];
@IndivTransformDims = [0, 0];
@IndivTransforms = zeros(4, 4, 0, 0);
@Name = 'New NeuroElf anatomical file';
@SourceFilename = '';
@A3D = struct( ...
    'NrOfTransforms', 0, ...
    'Transform', emptystruct({'Type', 'NrOfValues', 'Values'}), ...
    'NrOfSVCs', 0, ...
    'SVColors', zeros(0, 4));
@DTI = struct( ...
    'DTIDimMeaning', 'raw|tensor', ...
    'NrOfGradients', 7, ...
    'Gradients', zeros(7, 4), ...
    'TE', 0.1, ...
    'TR', 8);
@EXP = struct( ...
    'NrOfConditions', 2, ...
    'Conditions', {{'condition', 'constant'}}, ...
    'NrOfConfoundConditions', 1, ...
    'ConfoundConditions', 2, ...
    'TemporalUnit', 's', ...
    'ColumnMeanings', ...
        {{'Subject', 'Run', 'Condition', 'Onset', 'Duration', 'P1N', 'P1V'}}, ...
    'NrOfParameters', 1, ...
    'ParameterNames', {{'param'}}, ...
    'ParameterOrder', 1, ...
    'ParameterNorm', 0, ...
    'NrOfSubjects', 1, ...
    'Subjects', {{'subject'}}, ...
    'NrOfRuns', 1, ...
    'Runs', {{'rundata.ext'}}, ...
    'SubjectOfRun', 1, ...
    'MotionParameters', {{'rundata.mot'}}, ...
    'RegressionType', 'RFX_SUB', ...
    'RobustRegression', 0, ...
    'BasisFunctionSet', 'h', ...
    'TimecourseNormalization', 'p', ...
    'FilterType', 'f', ...
    'FilterCutoff', 180, ...
    'IntensityThresh', 0.5, ...
    'Mask', '', ...
    'AddMotionParameters', 1, ...
    'AddSquaredMP', 1);
@ICA = struct( ...
    'NrOfFingerprintParameters', 12, ...
    'FingerprintParameterNames', {{ ...
        'RMS', 'Degree of Clustering', 'Skewness', 'Kurtosis', ...
        'Spatial Entropy', '1-Lag Autocorr', 'Temporal Entropy', ...
        'Power B1', 'Power B2', 'Power B3', 'Power B4', 'Power B5'}}, ...
    'Fingerprints', zeros(0, 12));
@MAP = struct( ...
    'Name', 'New map', ...
    'SourceFilename', 'interactive', ...
    'StatsType', 't', ...
    'Component', struct( ...
        'NrOfTimePoints', 0, ...
        'Timecourse', []), ...
    'DF1', 120, ...
    'DF2', 1, ...
    'LowerThreshold', -sdist('tinv', 0.001, 120), ...
    'UpperThreshold', -sdist('tinv', 1e-6, 120), ...
    'BonferroniFactor', 114688, ...
    'TailsEnabled', [1, 1], ...
    'kThresh', 10, ...
    'kThreshEnabled', 1, ...
    'NrOfColors', 0, ...
    'Colors', zeros(0, 3), ...
    'AlphaFactor', 1, ...
    'CCLagInfo', [1, 1, 1]);
@REG = struct( ...
    'RegressionType', 'RFX_SUB', ...
    'Robust', 0, ...
    'NrOfSubjects', 1, ...
    'SubjectIDs', {{'subject'}}, ...
    'NrOfPredictors', 2, ...
    'PredictorNames', {{'condition', 'constant'}}, ...
    'NrOfExtraMaps', 0, ...
    'ExtraMapNames', {{}}, ...
    'NrOfMapInfoColumns', 3, ...
    'MapInfoColumnNames', {{'Subject', 'Session', 'Regressor'}}, ...
    'MapInfo', [1, 1, 1; 1, 1, 2], ...
    'NrOfRuns', 1, ...
    'RunFileNames', {{'data.ext'}}, ...
    'RegressorFileNames', {{'interactive'}}, ...
    'NrOfRunInfoColumns', 2, ...
    'RunInfoColumnNames', {{'NrOfTimepoints', 'TR'}}, ...
    'RunInfo', [120, 2], ...
    'NrOfOnsets', 4, ...
    'NrOfOnsetColumns', 7, ...
    'OnsetColumnNames', ...
        {{'Subject', 'Run', 'Condition', 'Onset', 'Duration', 'P1N', 'P1V'}}, ...
    'Onsets', [ones(4, 3), [4, 20; 34, 20; 64, 20; 94, 20], zeros(4, 2)]);
@TCD = struct( ...
    'Space', 'R', ...
    'TR', 2, ...
    'NrOfSliceOrderValues', 28, ...
    'SliceOrder', [1:2:28, 2:2:28], ...
    'MotionCorrected', 0, ...
    'ReferenceA3D', '', ...
    'ReferenceTemplate', '', ...
    'Smoothing', 0, ...
    'TempFilterType', 'n', ...
    'TempFilterCutoff', Inf, ...
    'TempSmoothing', 0, ...
    'NrOfParameters', 0, ...
    'ParameterNames', {{}}, ...
    'Parameters', []);
@TRF = struct( ...
    'TransformationType', 'spmnorm', ...
    'NrOfParameters', 0, ...
    'NrOfParameterColumns', 0, ...
    'ParameterColumnNames', {{}}, ...
    'Parameter', zeros(0, 0));
@TRI = struct( ...
    'NrOfTransforms', 0, ...
    'Transform', emptystruct({'Type', 'NrOfValues', 'Values'}), ...
    'RotationCenter', [0, 0, 0], ...
    'NrOfTriangles', 0, ...
    'Triangles', zeros(0, 3), ...
    'ColorsPerVertex', 1, ...
    'NrOfIndexColors', 2, ...
    'Colors', [144, 144, 144; 192, 192, 192], ...
    'VertexColors', uint8(zeros(0, 4)));
@Mask = [];
@Data = uint8(0);
@Data(1:@Size(1), 1:@Size(2), 1:@Size(3)) = @Data(1);
EndNewFileCode
