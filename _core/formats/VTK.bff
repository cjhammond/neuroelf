# BinaryFileFormat (leave this tag as its own magic token!)

# VTK files
#
# Version:  v0.9c
# Build:    13110810
# Date:     Oct-04 2013, 11:22 AM EST
# Author:   Jochen Weber, SCAN Unit, Columbia University, NYC, NY, USA
# URL/Info: http://neuroelf.net/

# FILE FORMAT
Description:VTK binary files
EncodingSyntax:ieee-be
Extensions:vtk
Magic:|
name             |range       |type    |magic
VTK_VTKMagic     |3, 48       |regexpi |^vtk\s+datafile\s+.*\s+binary\s+
EndMagic

# FIELDS
ListOfFields:!
type  !cond                   !disktype!datatype!dim                      !default !varname

# no write support at the moment
EXPRE !$BFFWRITE              !!!!!error('no write support');

# read header
EXPRE !$BFFREAD               !!!!! ...
@@ = emptystruct({'DatasetType', 'NrOfPoints', 'NrOfTriangleStripSeries', ...
    'NrOfTriangleStripElements', 'NrOfTriangles', 'Coordinates', 'Normals', ...
    'TriangleStrips', 'TriangleStripData', 'Triangles', ...
    'PointData', 'LookUpTable'}, [1, 1]);

BLOOP !$BFFREAD               ! ! !1 ! !RH

EXPRE !                       !!!!! ...
mydtypes = {'float', 'double'}; ...
mydttarg = {'single', 'double'}; ...
rfpos = ftell(fid); ...
hbytes = fread(fid, [1, 256], 'uint8=>char'); ...
fseek(fid, rfpos, -1); ...
hlines = splittocell(hbytes, char(10)); ...
if numel(hlines) < 4, ...
    error('Invalid VTK file.'); ...
end, ...
if ~any(strcmpi(hlines{3}, {'ascii', 'binary'})), ...
    error('Invalid ASCII/BINARY VTK file.'); ...
end, ...
$VSUBTYPE = lower(hlines{3}(1));

EXPRE !                       !!!!!hlines = hlines(4:end);

BLOOP !$VSUBTYPE == 'a'       ! ! !100!!REA
EXPRE !                       !!!!! ...
if $REA == 1, ...
    fclose(fid); ...
    try, ...
        hlines = splittocellc(asciiread($FILENAME), char([10, 13]), false, true); ...
    catch ne_eo; ...
        neuroelf_lasterr(ne_eo); ...
        fid = fopen($FILENAME); ...
        fseek(fid, 0, 1); ...
        error('Error reading VTK ASCII file.'); ...
    end, ...
    hlines(1:3) = []; ...
    fid = fopen($FILENAME); ...
    fseek(fid, 0, 1); ...
end, ...
if isempty(hlines), ...
    hlines = {''}; ...
    $REA = 100; ...
end, ...
hline = splittocell(hlines{1}, ' ', 1, 1); ...
if isempty(hline), ...
    hline = {'EMPTYLINE'}; ...
end, ...
lnh = true;

EXPRE !lnh && strcmpi(hline{1}, 'cell_data')      !!!!! ...
lnh = false; ...
hlines(1) = []; ...
if ~isempty(@NrOfTriangleStripSeries) && @NrOfTriangleStripSeries ~= str2double(hline{2}), ...
    error('NrOfTriangleStripSeries mismatch.'); ...
end

EXPRE !lnh && strcmpi(hline{1}, 'dataset')        !!!!! ...
lnh = false; ...
hlines(1) = []; ...
@DatasetType = hline{2};

EXPRE !lnh && strcmpi(hline{1}, 'normals')        !!!!! ...
lnh = false; ...
if isempty(@NrOfPoints), ...
    error('Normals not readable before setting NrOfPoints.'); ...
end, ...
mydtmatch = strcmpi(hline{3}, mydtypes); ...
if ~any(mydtmatch), ...
    error('Invalid normals datatype.'); ...
end, ...
try, ...
    @Normals = u8str2double(gluetostringc(hlines(2:1+@NrOfPoints), char(10), true), @NrOfPoints, 3); ...
catch ne_eo; ...
    error('Invalid normals data in ASCII VTK file.'); ...
end, ...
hlines(1:1+@NrOfPoints) = [];
if numel(hlines) < 1 || numel(hlines{1}) < 2, ...
    $REA = 100; ...
end

EXPRE !lnh && strcmpi(hline{1}, 'points')         !!!!! ...
lnh = false; ...
@NrOfPoints = str2double(hline{2}); ...
mydtmatch = strcmpi(hline{3}, mydtypes); ...
if ~any(mydtmatch), ...
    error('Invalid points datatype.'); ...
end, ...
try, ...
    @Coordinates = u8str2double(gluetostringc(hlines(2:1+@NrOfPoints), char(10), true), @NrOfPoints, 3); ...
catch ne_eo; ...
    error('Invalid points data in ASCII VTK file.'); ...
end, ...
hlines(1:1+@NrOfPoints) = [];
if isempty(hlines) || numel(hlines{1}) < 2, ...
    $REA = 100; ...
end

EXPRE !lnh && strcmpi(hline{1}, 'point_data')     !!!!! ...
lnh = false; ...
if ~isempty(@NrOfPoints) && @NrOfPoints ~= str2double(hline{2}), ...
    error('NrOfPoints mismatch.'); ...
end, ...
hlines(1) = []; ...
numpvals = 1; ...
hline = splittocell(hlines{1}, ' ', 1, 1); ...
if ~isempty(hline) && strcmpi(hline{1}, 'scalars'), ...
    hlines(1) = []; ...
    if numel(hline) > 3 && ~isempty(regexpi(hline{4}, '^\d+$')), ...
        numpvals = str2double(hline{4}); ...
    end, ...
    hline = splittocell(hlines{1}, ' ', 1, 1); ...
end, ...
if ~isempty(hline) && strcmpi(hline{1}, 'lookup_table'), ...
    hlines(1) = []; ...
    hline = splittocell(hlines{1}, ' ', 1, 1); ...
end, ...
@PointData = u8str2double(gluetostringc(hlines(1:@NrOfPoints), char(10), true), @NrOfPoints, numpvals); ...
hlines(1:@NrOfPoints) = []; ...
if isempty(hlines) || numel(hlines{1}) < 2, ...
    $REA = 100; ...
end

EXPRE !lnh && strcmpi(hline{1}, 'polygons')     !!!!! ...
lnh = false; ...
nrofpolys = str2double(hline{2}); ...
nrofpolyes = str2double(hline{3}); ...
if (4 * nrofpolys) ~= nrofpolyes, ...
    error('Invalid polygons (triangles required) in ASCII VTK file.'); ...
end, ...
try, ...
    @Triangles = u8str2double(gluetostringc(hlines(2:1+nrofpolys), char(10), true), nrofpolys, 4) + 1; ...
    @Triangles(:, 1) = []; ...
    @NrOfTriangles = nrofpolys; ...
catch ne_eo; ...
    error('Invalid triangles content in ASCII VTK file.'); ...
end, ...
hlines(1:1+nrofpolys) = []; ...
if isempty(hlines) || numel(hlines{1}) < 2, ...
    $REA = 100; ...
end

EXPRE !lnh && strcmpi(hline{1}, 'triangle_strips')!!!!! ...
lnh = false; ...
hlines(1) = []; ...
@NrOfTriangleStripSeries = str2double(hline{2}); ...
@NrOfTriangleStripElements = str2double(hline{3}); ...
myfpat = [hline{1} ' ' hline{2} ' ' hline{3} char(10)]; ...
mympat = strfind(hbytes, myfpat); ...
if numel(mympat) ~= 1, ...
    error('Error finding end of ascii desc.'); ...
end, ...
fseek(fid, mympat+numel(myfpat)-1, 0); ...
@TriangleStripData = fread(fid, [1, @NrOfTriangleStripElements], 'uint32=>double'); ...
hbytes = fread(fid, [1, 1], 'uint8=>char'); ...
rfpos = ftell(fid); ...
try, ...
    hbytes = fread(fid, [1,128], 'uint8=>char'); ...
catch ne_eo; ...
    neuroelf_lasterr(ne_eo); ...
    hbytes = ['EndOfFile' char(10)]; ...
end, ...
hlines = splittocell(hbytes, char(10)); ...
fseek(fid, rfpos, -1); ...
if numel(hlines) < 1 || numel(hlines{1}) < 2, ...
    $REA = 100; ...
end

ELOOP !                       ! ! !  ! !REA


BLOOP !$VSUBTYPE == 'b'       ! ! !100!!REB

EXPRE !                       !!!!! ...
if isempty(hlines), ...
    hlines = {''}; ...
end, ...
hline = splittocell(hlines{1}, ' ', 1, 1); ...
if isempty(hline), ...
    hline = {'EMPTYLINE'}; ...
end, ...
lnh = true;

EXPRE !lnh && strcmpi(hline{1}, 'cell_data')      !!!!! ...
lnh = false; ...
hlines(1) = []; ...
if ~isempty(@NrOfTriangleStripSeries) && @NrOfTriangleStripSeries ~= str2double(hline{2}), ...
    error('NrOfTriangleStripSeries mismatch.'); ...
end

EXPRE !lnh && strcmpi(hline{1}, 'dataset')        !!!!! ...
lnh = false; ...
hlines(1) = []; ...
@DatasetType = hline{2};

EXPRE !lnh && strcmpi(hline{1}, 'normals')        !!!!! ...
lnh = false; ...
hlines(1) = []; ...
if isempty(@NrOfPoints), ...
    error('Normals not readable before setting NrOfPoints.'); ...
end, ...
mydtmatch = strcmpi(hline{3}, mydtypes); ...
if ~any(mydtmatch), ...
    error('Invalid points datatype.'); ...
end, ...
myfpat = [hline{1} ' ' hline{2} ' ' hline{3} char(10)]; ...
mympat = strfind(hbytes, myfpat); ...
if numel(mympat) ~= 1, ...
    error('Error finding end of ascii desc.'); ...
end, ...
fseek(fid, mympat+numel(myfpat)-1, 0); ...
@Normals = reshape(fread(fid, [1, 3 * @NrOfPoints], [mydttarg{find(mydtmatch)} '=>double']), [3, @NrOfPoints])'; ...
hbytes = fread(fid, [1, 1], 'uint8=>char'); ...
rfpos = ftell(fid); ...
try, ...
    hbytes = fread(fid, [1, 128], 'uint8=>char'); ...
catch ne_eo; ...
    neuroelf_lasterr(ne_eo); ...
    hbytes = ['EndOfFile' char(10)]; ...
end, ...
hlines = splittocell(hbytes, char(10)); ...
fseek(fid, rfpos, -1); ...
if numel(hlines) < 1 || numel(hlines{1}) < 2, ...
    $REB = 100; ...
end

EXPRE !lnh && strcmpi(hline{1}, 'points')         !!!!! ...
lnh = false; ...
hlines(1) = []; ...
@NrOfPoints = str2double(hline{2}); ...
mydtmatch = strcmpi(hline{3}, mydtypes); ...
if ~any(mydtmatch), ...
    error('Invalid points datatype.'); ...
end, ...
myfpat = [hline{1} ' ' hline{2} ' ' hline{3} char(10)]; ...
mympat = strfind(hbytes, myfpat); ...
if numel(mympat) ~= 1, ...
    error('Error finding end of ascii desc.'); ...
end, ...
fseek(fid, mympat+numel(myfpat)-1, 0); ...
@Coordinates = reshape(fread(fid, [1, 3 * @NrOfPoints], [mydttarg{find(mydtmatch)} '=>double']), [3, @NrOfPoints])'; ...
hbytes = fread(fid, [1, 1], 'uint8=>char'); ...
rfpos = ftell(fid); ...
try, ...
    hbytes = fread(fid, [1, 128], 'uint8=>char'); ...
catch ne_eo; ...
    neuroelf_lasterr(ne_eo); ...
    hbytes = ['EndOfFile' char(10)]; ...
end, ...
hlines = splittocell(hbytes, char(10)); ...
fseek(fid, rfpos, -1); ...
if numel(hlines) < 1 || numel(hlines{1}) < 2, ...
    $REB = 100; ...
end

EXPRE !lnh && strcmpi(hline{1}, 'point_data')     !!!!! ...
lnh = false; ...
hlines(1) = []; ...
if ~isempty(@NrOfPoints) && @NrOfPoints ~= str2double(hline{2}), ...
    error('NrOfPoints mismatch.'); ...
end

EXPRE !lnh && strcmpi(hline{1}, 'triangle_strips')!!!!! ...
lnh = false; ...
hlines(1) = []; ...
@NrOfTriangleStripSeries = str2double(hline{2}); ...
@NrOfTriangleStripElements = str2double(hline{3}); ...
myfpat = [hline{1} ' ' hline{2} ' ' hline{3} char(10)]; ...
mympat = strfind(hbytes, myfpat); ...
if numel(mympat) ~= 1, ...
    error('Error finding end of ascii desc.'); ...
end, ...
fseek(fid, mympat+numel(myfpat)-1, 0); ...
@TriangleStripData = fread(fid, [1, @NrOfTriangleStripElements], 'uint32=>double'); ...
hbytes = fread(fid, [1, 1], 'uint8=>char'); ...
rfpos = ftell(fid); ...
try, ...
    hbytes = fread(fid, [1,128], 'uint8=>char'); ...
catch ne_eo; ...
    neuroelf_lasterr(ne_eo); ...
    hbytes = ['EndOfFile' char(10)]; ...
end, ...
hlines = splittocell(hbytes, char(10)); ...
fseek(fid, rfpos, -1); ...
if numel(hlines) < 1 || numel(hlines{1}) < 2, ...
    $REB = 100; ...
end

ELOOP !                       ! ! !  ! !REB

ELOOP !                       ! ! !  ! !RH
EXPRE !$BFFREAD               !!!!! ...
if ~isempty(@TriangleStripData) && isempty(@Triangles), ...
    @Triangles = zeros(@NrOfTriangleStripElements - 3*@NrOfTriangleStripSeries, 3); ...
    trcnt = 1; ...
    tspos = 1; ...
    for tsc = 1:@NrOfTriangleStripSeries, ...
        tslen = @TriangleStripData(tspos); ...
        trnum = tslen - 2; ...
        tsdat = @TriangleStripData(tspos+1:tspos+tslen)+1; ...
        tsv = [1:tslen-2;2*round(1:0.5:(tslen-1)/2);1+2*floor(1:0.5:(tslen-1)/2)]'; ...
        @Triangles(trcnt:trcnt+trnum-1,:) = tsdat(tsv); ...
        tspos = tspos + 1 + tslen; ...
        trcnt = trcnt + trnum; ...
    end, ...
end

# Read rest of File into REMAININGCONTENT
EXPRE !$BFFREAD           !!!!!$RemSize = $FILESIZE - ftell(fid);
EXPRE !$BFFWRITE          !!!!!$RemSize = 0; try, if isfield(@@, 'REMAININGCONTENT'), $RemSize = prod(size(@REMAININGCONTENT)); end, end
FIELD !$RemSize > 0           !uint8   !uint8   !1, $RemSize              !        !REMAININGCONTENT

EndListOfFields

NewFileCode:!
@DatasetType = 'POLYDATA';
@NrOfPoints = 0;
@NrOfTriangleStripSeries = 0;
@NrOfTriangleStripElements = 0;
@NrOfTriangles = 0;
@Coordinates = zeros(@NrOfPoints, 3);
@Normals = zeros(@NrOfPoints, 3);
@TriangleStrips = cell(@NrOfTriangleStripSeries, 1);
@TriangleStripData = [];
@Triangles = [];
@PointData = [];
@LookUpTable = [];
EndNewFileCode
